parser: babel-eslint

extends:
  - airbnb
  - plugin:jest/recommended
  - ./tools/formatting.eslintrc.yaml

plugins:
 - jest
 - flowtype
 # - react-native  # see commented-out rules config below

env:
  browser: true
  mocha: true
  node: true
  jest: true

globals: # true/false means mutable/const
  __DEV__: false
  __TEST__: false

settings:
  # This setting is shared by the rules `import/*`.  For details, see:
  #   https://github.com/benmosher/eslint-plugin-import#resolvers
  #   https://www.npmjs.com/package/eslint-import-resolver-node
  import/resolver:
    node:
      extensions: [.js, .ios.js, .android.js, .json]

rules:
  # Formatting and naming
  camelcase: off

  # Permit dangling underscores in class property names, to denote "private"
  # fields. (These should be replaced with true private fields per the TC39
  # class fields proposal [1], once that's available to us.)
  #
  # [1]: https://github.com/tc39/proposal-class-fields
  no-underscore-dangle: ["error", { allowAfterThis: true } ]
  # Disallow double underscores and trailing underscores.
  id-match: ["error", "^_?([a-zA-Z0-9$]+_?)*$", { "properties": true }]

  # Disable a bunch of rules that should be taken care of by prettier.
  arrow-parens: off
  comma-dangle: off
  function-paren-newline: off
  indent: off
  lines-between-class-members: off
  max-len: off
  no-mixed-operators: off
  object-curly-newline: off
  quote-props: off

  # For more formatting rules, see tools/formatting.eslintrc.yaml .

  # Repeal a rather absurd rule that makes some code impossible to write in
  # the most reasonable way.
  no-else-return: off

  # Tricky code.  We repeal several bans from the Airbnb style.
  no-bitwise: off
  no-confusing-arrow: off
  no-continue: off
  no-plusplus: off
  no-nested-ternary: off

  # We also partly repeal AirBnB's forbidden-syntax subrules. (This must be done
  # in the `overrides:` section.)
  #
  # no-restricted-syntax: ...

  # Likely-wrong code
  no-unused-vars: [warn, {vars: local, args: none}]
  # no-param-reassign seems well-intentioned... but fires on common uses
  # of Array#reduce.  Too noisy.
  no-param-reassign: off

  # Imports
  import/prefer-default-export: off
  import/no-extraneous-dependencies:
  - error
  - devDependencies: ['**/__tests__/**/*.js', tools/**]
  no-restricted-imports:
  - error
  - patterns: ['**/__tests__/**']
  import/no-cycle: off  # This would be nice to fix; but isn't easy.

  # Jest
  # This rule could be useful if it fired only on new instances; but we
  # don't have a way to do that, and it doesn't make sense to keep these
  # out of the repo.
  jest/no-disabled-tests: off

  # React
  react/jsx-filename-extension: off  # Like RN upstream, we call the files *.js.
  react/destructuring-assignment: off  # The opposite is often much cleaner.
  react/no-multi-comp: off  # This often just forces making code worse.
  react/no-unused-prop-types: off  # This can be perfectly appropriate.
  react/default-props-match-prop-types: off  # We handle this better with types.
  react/prop-types: off  # We handle this better with types.
  react/require-default-props: off  # We handle this better with types.
  # These two could be good to fix.
  react/prefer-stateless-function: off
  react/sort-comp: off

  # React Native.
  #
  # This plugin isn't included in the airbnb config, and it doesn't
  # itself enable any rules by default, so this config is it.
  #
  # (From the docs as of 2020-03, these are the rules we'd like to use.
  # Plugin disabled only because the rules are; bring it back when
  # reviving either of them.)
  #
  # react-native/no-unused-styles: error  # This is buggy on the `this.styles` pattern.
  # react-native/no-color-literals: error  # TODO eliminate these and enable.

  # Flow
  flowtype/boolean-style: [error, boolean]
  flowtype/define-flow-type: warn
  flowtype/delimiter-dangle: off
  flowtype/generic-spacing: [error, never]
  flowtype/no-dupe-keys: error
  flowtype/no-primitive-constructor-types: error
  flowtype/no-types-missing-file-annotation: error
  ################# flowtype/no-weak-types: error
  # flowtype/require-parameter-type: error
  flowtype/require-readonly-react-props: error
  # flowtype/require-return-type: [error, always, {annotateUndefined: never}]
  flowtype/require-valid-file-annotation: error
  flowtype/semi: [error, always]
  flowtype/space-before-generic-bracket: [error, never]
  flowtype/space-before-type-colon: [error, never]
  # For more formatting rules, see tools/formatting.eslintrc.yaml.
  flowtype/type-id-match: [error, '^([A-Z][a-z0-9]+)+$']
  flowtype/union-intersection-spacing: [error, always]
  flowtype/use-flow-type: warn
  flowtype/valid-syntax: warn

  # spellcheck/spell-checker: see tools/spellcheck.eslintrc.yaml .

overrides:

# Global overrides
- files: ["*.js"]
  rules:
    # Here we repeal several AirBnB subrules.
    #
    # - The AirBnB rule disallowing labeled statements arises largely from their
    #   controversial hardcore anti-loop position [1], which we don't share.
    #
    # - The AirBnB rule disallowing `for..of` statements is partly based on the
    #   above. More reasonably, though, it cites the `regenerator-runtime`
    #   library (which Babel uses to implement them) as being too heavyweight.
    #   Unfortunately, we're already including `regenerator-runtime` for other
    #   reasons, and there's no easy way to find out what. (In for a penny, in
    #   for a pound.)
    #
    # - The AirBnB rule disallowing `with` statements has a shorter built-in
    #   equivalent. (And the parser enforces it in strict mode, anyway.)
    #
    # Alas, ESLint does not allow these repeals to be done surgically; we must
    # duplicate the entire acceptable portion of the rule. The original text
    # thereof can be found at [2].

    # [1]: https://github.com/airbnb/javascript/issues/1103
    # [2]: https://github.com/airbnb/javascript/blob/dee4f17/packages/eslint-config-airbnb-base/rules/style.js#L334
    no-restricted-syntax:
    - error
    - selector: ForInStatement
      message: 'for..in loops iterate over the entire prototype chain, which
        is virtually never what you want. Use Object.{keys,values,entries}, and
        iterate over the resulting array.'
        # They're also slightly buggy in JSC [1], on which react-native is
        # built... and, surprisingly, their semantics weren't fully nailed down
        # until as late as 2019-12 [2]. But the above is reason enough.
        # [1]: https://bugs.webkit.org/show_bug.cgi?id=38970
        # [2]: https://github.com/tc39/proposals/commit/cb9c6e50

    no-with: error

# Test file overrides
- files: ['**/__tests__/**']
  rules:
    no-restricted-imports: off
