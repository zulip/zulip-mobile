apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/ram-bundles-inline-requires#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        enableHermes      : false, // clean and rebuild if changing
        // quasi-unstable: see commits 8f8a266af and 833d083a9
        jsBundleDirRelease: "$buildDir/intermediates/merged_assets/release/out"
]

apply from: "../../node_modules/react-native/react.gradle"

if (hasProperty('sentry')) {
    // Conditionally enable Sentry, because it requires an auth key.
    apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

apply from: "./webviewAssets.gradle"

def keystorePropertiesFile = rootProject.file("release-keystore.properties")
def keystoreProperties = new Properties()
try {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} catch (FileNotFoundException e) {
    keystoreProperties = null
}

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false
def shrinkResourcesInProguardBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here.
 * If it is not set on project.ext.react, JavaScript will not be compiled to
 * Hermes Bytecode and the benefits of using Hermes will therefore be
 * sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    defaultConfig {
        applicationId "com.zulipmobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 196
        versionName "27.196"
    }
    signingConfigs {
        // The RN v0.60 template app suggests configuring a debug
        // keystore here. We don't; it's unnecessary (Android Studio
        // gives you one automatically) and not an improvement.
        release {
            if (project.hasProperty('signed')) {
                if (keystoreProperties == null) {
                    throw new GradleException(
                            "Missing signing config, but signing requested (-Psigned).  Did you want an unsigned build?")
                }
                storeFile rootProject.file(keystoreProperties.storeFile)
                if (!storeFile.exists()) {
                    throw new GradleException(
                            "Keystore file missing, but signing requested (-Psigned).  Did you want an unsigned build?")
                }
                storePassword keystoreProperties.storePassword
                keyAlias keystoreProperties.keyAlias
                keyPassword keystoreProperties.keyPassword
            }
        }
    }
    splits {
        abi {
            reset()
            enable true // Build a separate APK for each ABI.
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            // `minifyEnabled` is required for `shrinkResources`
            shrinkResources(enableProguardInReleaseBuilds && shrinkResourcesInProguardBuilds)

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (project.hasProperty('signed')) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }
    sourceSets.main {
        assets.srcDirs += file("../../static/assets")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.core:core-ktx:1.7.0"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.browser:browser:1.0.0'

    implementation "com.google.firebase:firebase-messaging:17.3.4"

    // ==== Test dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.0'
    testImplementation 'com.google.truth:truth:0.43'
    testImplementation 'com.google.truth.extensions:truth-java8-extension:0.43'
    testImplementation 'org.mockito:mockito-core:1.10.19'

    // ==== RN-related dependencies

    implementation 'com.facebook.fresco:animated-gif:2.0.0' // For animated GIF support

    // Workaround for facebook/react-native#32735; see
    //   https://github.com/facebook/react-native/issues/32735#issue-1077061487
    // TODO(react-native-68): Remove; fixed in facebook/react-native@f45889ef9
    implementation('com.facebook.soloader:soloader:0.10.3') {
        version {
            strictly '0.10.3'
        }
    }

    // ----------------------------------------
    // Dependencies from RN upstream, in the template app

    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
    // END dependencies from RN upstream
    // ----------------------------------------

    // Don't put new dependencies down here.  Put them above, before the upstream section.
}

// The default kotlinOptions.jvmTarget is 1.6.  With the default, we get
// compilation errors in at least our tests, from invoking `inline` methods
// in some libraries which apparently were compiled for 1.8 (aka Java 8.)
//
// In at least a quick smoketest, the app still works fine on Android K (API 19),
// the oldest we support.
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// Necessary for Autolinking; see facebook/react-native@261197d85
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
