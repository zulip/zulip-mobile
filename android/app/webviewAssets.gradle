import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.Paths

/**
 * Build and merge static webview assets.
 *
 * This is largely the job of `$ROOT/tools/build-webview`, a script external to
 * Gradle, as there is significant overlap between the iOS and Android build
 * processes. See comments therein (or $ROOT/src/webview/static/README.md) for
 * more information.
 */

/*
 * Windows support functions.
 *
 * On Windows, we have three different possible setups:
 *   1. Windows Gradle + Git Bash.
 *   2. Windows Gradle + WSL's bash.
 *   3. WSL Gradle + WSL's bash.
 *
 * Case 3, fortunately, should behave exactly like Linux.
 *
 * In cases 1 and 2, however, all paths Gradle provides are backslash-separated.
 * This is problematic on its own, as the script we're invoking doesn't grok
 * backslashes, so we normalize those on Windows. That's enough for case 1.
 *
 * Case 2 is worse, though. The `bash` of Git Bash groks both "C:/" and "C:\";
 * more generally, it operates on the Windows filesystem with Windows path
 * names. The WSL `bash` _doesn't_ -- it's a standard Linux `bash` (or close
 * enough), and it only sees the Windows disks as ordinary mounts under the lone
 * root path '/'. Paths beginning with either "C:/" or "C:\" will confuse it
 * terribly.
 *
 * And, of course, Gradle has no good way of distinguishing between cases 1 and
 * 2. As far as it's concerned, `bash.exe` is `bash.exe`.
 *
 * Since we can't predict the environment of our callee, we can't use absolute
 * paths. Fortunately, with only a little extra work within the script itself,
 * we _can_ use relative paths; the script must derelativize them appropriately.
 */

/** Normalize the path-separators of `path` to be forward slashes. */
def normalizePath(String path) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return path.replace('\\', '/')
    } else {
        return path
    }
}

/** Return `path`, made relative to `basePath`. */
def relativizePath(String path, String basePath) {
    return Paths.get(basePath).relativize(Paths.get(path)).toString();
}

gradle.projectsEvaluated {
    // The root of our git repository.
    def repoDir = project.file('../..').absolutePath

    // The intermediate assets directory which we'll be writing files to.
    //
    // This directory:
    //  * should not be under source control, and
    //  * should not collide with any autogenerated directory.
    //
    // (In particular, we should _not_ build directly to an assets-merge task's
    // output directory: we run before it does, and it will generally clear that
    // directory out before merging.)
    //
    // At present, as there is no difference between debug and release, this
    // directory is the same for all build variants. If the former fact changes,
    // the latter should as well.
    def assetsDir = "${buildDir}/_zulip_webview_staging/out"

    // Declare ${assetsDir} to be an asset source directory associated with all
    // build variants. (See the documentation on build variants and source sets,
    // linked below, for more information.)
    //
    // https://developer.android.com/studio/build/build-variants.html#sourceset-build
    android.sourceSets.main.assets.srcDirs += assetsDir;

    // The immediate destination directory for `tools/build-webview`. This
    // directory will itself be copied into the APK, and so must be named
    // `webview`, as MessageList expects.
    //
    // (Additionally, see above note on Windows compatibility.)
    def destDir = normalizePath(relativizePath("${assetsDir}/webview", repoDir))

    // The actual task to be executed.
    def webviewTask = tasks.create(
        name: "buildStaticWebviewAssets",
        type: Exec
    ) {
        // All arguments to our script must be relative to `workingDir`.
        workingDir repoDir
        executable "bash"
        args "./tools/build-webview", "android", "--check-path-name",
            "--destination", destDir
    }

    // Ensure that the webview-build task is executed before each variant's
    // assets-merge task.
    android.applicationVariants.all { variant ->
        variant.mergeAssetsProvider.configure {
            dependsOn webviewTask
        }
    }
}
