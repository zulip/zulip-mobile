// @flow
import AsyncStorage from '@react-native-async-storage/async-storage'

// redux dependent typing
declare type Action = Object
declare type Dispatch = Function
declare type Store = Object
declare type StoreEnhancer = (next: Function) => Function

// redux-persist typing
type Whitelist = string[]
type Blacklist = string[]

declare type Config = {|
  blacklist?: Blacklist,
  whitelist?: Whitelist,

  // Flow's built-in `Class` utility type:
  //   https://flow.org/en/docs/types/utilities/#toc-class
  storage?: Class<AsyncStorage>,

  serialize?: boolean | Function,
  deserialize?: boolean | Function,
  keyPrefix?: string,
|}
declare type Purge = (keys?: Array<string>) => void
declare type Rehydrate = (incoming: Object, options: {| serial: boolean |}) => void
declare type Persistor = {|
  purge: Purge,
  rehydrate: Rehydrate,
  pause: () => void,
  resume: () => void,
|}
declare type OnComplete = (err?: any, result?: Object) => void

declare type Transformer = (substate: any, key: string) => any
declare type TransformConfig = {| whitelist?: Whitelist, blacklist?: Blacklist |}
declare type Transform = {|
  in: Transformer,
  out: Transformer,
|}
type StoredStateCallback = (state: Object, err: any) => void

type StateReconciler = (prevState: any, inboundState: any, nextState: any, log: bool) => any
type AutoRehydrateConfig = {|
  log?: boolean,
  stateReconciler?: StateReconciler,
|}

declare function createPersistor(store: Store, config: Config): Persistor
declare function createTransform(transformIn: Transformer, transformOut: Transformer, config?: TransformConfig): Transform
declare function getStoredState(config: Config, ?StoredStateCallback): ?Promise<Object>
declare function persistStore(store: Store, config?: Config, onComplete?: OnComplete): Persistor
declare function purgeStoredState(config: Config, keys?: Array<string>): Promise<void>
declare function autoRehydrate(config: ?AutoRehydrateConfig): StoreEnhancer

export {
  createPersistor,
  createTransform,
  getStoredState,
  persistStore,
  purgeStoredState,
  autoRehydrate,
}

export type {
  Persistor,
  Config,
}
