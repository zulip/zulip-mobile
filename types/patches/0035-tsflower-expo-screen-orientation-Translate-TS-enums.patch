From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chris Bobbe <cbobbe@zulip.com>
Date: Wed, 20 Jul 2022 15:29:34 -0700
Subject: [tsflower] expo-screen-orientation: Translate TS enums

As we did for expo-application; see that recent patch for why we
can't just convert these to Flow enums. That'd be so satisfying, if
it worked.
---
 .../build/ScreenOrientation.js.flow           |  12 +-
 .../build/ScreenOrientation.types.js.flow     | 207 +++++++++---------
 2 files changed, 110 insertions(+), 109 deletions(-)

diff --git types/expo-screen-orientation/build/ScreenOrientation.js.flow types/expo-screen-orientation/build/ScreenOrientation.js.flow
index a714391d8..487278d38 100644
--- types/expo-screen-orientation/build/ScreenOrientation.js.flow
+++ types/expo-screen-orientation/build/ScreenOrientation.js.flow
@@ -5,36 +5,40 @@ import { type Subscription } from 'expo-modules-core';
 
 import {
   Orientation,
+  type OrientationT,
   type OrientationChangeEvent,
   type OrientationChangeListener,
   OrientationLock,
+  type OrientationLockT,
   type PlatformOrientationInfo,
   WebOrientationLock,
   WebOrientation,
   SizeClassIOS,
   type ScreenOrientationInfo,
 } from './ScreenOrientation.types';
 
 export {
   Orientation,
+  OrientationT,
   OrientationLock,
+  OrientationLockT,
   PlatformOrientationInfo,
   OrientationChangeListener,
   OrientationChangeEvent,
   WebOrientationLock,
   WebOrientation,
   SizeClassIOS,
   ScreenOrientationInfo,
   Subscription,
 };
-declare export function lockAsync(orientationLock: OrientationLock): Promise<void>;
+declare export function lockAsync(orientationLock: OrientationLockT): Promise<void>;
 declare export function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void>;
 declare export function unlockAsync(): Promise<void>;
-declare export function getOrientationAsync(): Promise<Orientation>;
-declare export function getOrientationLockAsync(): Promise<OrientationLock>;
+declare export function getOrientationAsync(): Promise<OrientationT>;
+declare export function getOrientationLockAsync(): Promise<OrientationLockT>;
 declare export function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo>;
 declare export function supportsOrientationLockAsync(
-  orientationLock: OrientationLock,
+  orientationLock: OrientationLockT,
 ): Promise<boolean>;
 declare export function addOrientationChangeListener(
   listener: OrientationChangeListener,
diff --git types/expo-screen-orientation/build/ScreenOrientation.types.js.flow types/expo-screen-orientation/build/ScreenOrientation.types.js.flow
index ec7bf0644..88cbbc96d 100644
--- types/expo-screen-orientation/build/ScreenOrientation.types.js.flow
+++ types/expo-screen-orientation/build/ScreenOrientation.types.js.flow
@@ -1,141 +1,138 @@
 /* @flow
  * @generated by TsFlower
  */
-/* tsflower-unimplemented: EnumDeclaration */
-/* export declare enum Orientation {
-    /**
-     * An unknown screen orientation. For example, the device is flat, perhaps on a table.
-     * /
-    UNKNOWN = 0,
-    /**
-     * Right-side up portrait interface orientation.
-     * /
-    PORTRAIT_UP = 1,
-    /**
-     * Upside down portrait interface orientation.
-     * /
-    PORTRAIT_DOWN = 2,
-    /**
-     * Left landscape interface orientation.
-     * /
-    LANDSCAPE_LEFT = 3,
-    /**
-     * Right landscape interface orientation.
-     * /
-    LANDSCAPE_RIGHT = 4
-} */
 
-/* tsflower-unimplemented: EnumDeclaration */
-/* 
+declare export var Orientation: {|
+  /**
+   * An unknown screen orientation. For example, the device is flat, perhaps on a table.
+   */
+  +UNKNOWN: 0,
+  /**
+   * Right-side up portrait interface orientation.
+   */
+  +PORTRAIT_UP: 1,
+  /**
+   * Upside down portrait interface orientation.
+   */
+  +PORTRAIT_DOWN: 2,
+  /**
+   * Left landscape interface orientation.
+   */
+  +LANDSCAPE_LEFT: 3,
+  /**
+   * Right landscape interface orientation.
+   */
+  +LANDSCAPE_RIGHT: 4,
+|};
+export type OrientationT = $Values<typeof Orientation>;
+
 /**
  * An enum whose values can be passed to the [`lockAsync`](#screenorientationlockasyncorientationlock)
  * method.
  * > __Note:__ `OrientationLock.ALL` and `OrientationLock.PORTRAIT` are invalid on devices which
  * > don't support `OrientationLock.PORTRAIT_DOWN`.
- * /
-export declare enum OrientationLock {
-    /**
-     * The default orientation. On iOS, this will allow all orientations except `Orientation.PORTRAIT_DOWN`.
-     * On Android, this lets the system decide the best orientation.
-     * /
-    DEFAULT = 0,
-    /**
-     * All four possible orientations
-     * /
-    ALL = 1,
-    /**
-     * Any portrait orientation.
-     * /
-    PORTRAIT = 2,
-    /**
-     * Right-side up portrait only.
-     * /
-    PORTRAIT_UP = 3,
-    /**
-     * Upside down portrait only.
-     * /
-    PORTRAIT_DOWN = 4,
-    /**
-     * Any landscape orientation.
-     * /
-    LANDSCAPE = 5,
-    /**
-     * Left landscape only.
-     * /
-    LANDSCAPE_LEFT = 6,
-    /**
-     * Right landscape only.
-     * /
-    LANDSCAPE_RIGHT = 7,
-    /**
-     * A platform specific orientation. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).
-     * /
-    OTHER = 8,
-    /**
-     * An unknown screen orientation lock. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).
-     * /
-    UNKNOWN = 9
-} */
+ */
+declare export var OrientationLock: {|
+  /**
+   * The default orientation. On iOS, this will allow all orientations except `Orientation.PORTRAIT_DOWN`.
+   * On Android, this lets the system decide the best orientation.
+   */
+  +DEFAULT: 0,
+  /**
+   * All four possible orientations
+   */
+  +ALL: 1,
+  /**
+   * Any portrait orientation.
+   */
+  +PORTRAIT: 2,
+  /**
+   * Right-side up portrait only.
+   */
+  +PORTRAIT_UP: 3,
+  /**
+   * Upside down portrait only.
+   */
+  +PORTRAIT_DOWN: 4,
+  /**
+   * Any landscape orientation.
+   */
+  +LANDSCAPE: 5,
+  /**
+   * Left landscape only.
+   */
+  +LANDSCAPE_LEFT: 6,
+  /**
+   * Right landscape only.
+   */
+  +LANDSCAPE_RIGHT: 7,
+  /**
+   * A platform specific orientation. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).
+   */
+  +OTHER: 8,
+  /**
+   * An unknown screen orientation lock. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).
+   */
+  +UNKNOWN: 9,
+|};
+export type OrientationLockT = $Values<typeof OrientationLock>;
 
-/* tsflower-unimplemented: EnumDeclaration */
-/* 
 /**
  * Each iOS device has a default set of [size classes](https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdaptiveModel.html)
  * that you can use as a guide when designing your interface.
- * /
-export declare enum SizeClassIOS {
-    REGULAR = 0,
-    COMPACT = 1,
-    UNKNOWN = 2
-} */
+ */
+declare export var SizeClassIOS: {|
+  +REGULAR: 0,
+  +COMPACT: 1,
+  +UNKNOWN: 2,
+|};
+export type SizeClassIOST = $Values<typeof SizeClassIOS>;
 
-/* tsflower-unimplemented: EnumDeclaration */
-/* 
 /**
  * An enum representing the lock policies that can be applied on the web platform, modelled after
  * the [W3C specification](https://w3c.github.io/screen-orientation/#dom-orientationlocktype).
  * These values can be applied through the [`lockPlatformAsync`](#screenorientationlockplatformasyncoptions)
  * method.
- * /
-export declare enum WebOrientationLock {
-    PORTRAIT_PRIMARY = "portrait-primary",
-    PORTRAIT_SECONDARY = "portrait-secondary",
-    PORTRAIT = "portrait",
-    LANDSCAPE_PRIMARY = "landscape-primary",
-    LANDSCAPE_SECONDARY = "landscape-secondary",
-    LANDSCAPE = "landscape",
-    ANY = "any",
-    NATURAL = "natural",
-    UNKNOWN = "unknown"
-} */
+ */
+declare export var WebOrientationLock: {|
+  +PORTRAIT_PRIMARY: 'portrait-primary',
+  +PORTRAIT_SECONDARY: 'portrait-secondary',
+  +PORTRAIT: 'portrait',
+  +LANDSCAPE_PRIMARY: 'landscape-primary',
+  +LANDSCAPE_SECONDARY: 'landscape-secondary',
+  +LANDSCAPE: 'landscape',
+  +ANY: 'any',
+  +NATURAL: 'natural',
+  +UNKNOWN: 'unknown',
+|};
+export type WebOrientationLockT = $Values<typeof WebOrientationLock>;
 
-/* tsflower-unimplemented: EnumDeclaration */
-/* 
-export declare enum WebOrientation {
-    PORTRAIT_PRIMARY = "portrait-primary",
-    PORTRAIT_SECONDARY = "portrait-secondary",
-    LANDSCAPE_PRIMARY = "landscape-primary",
-    LANDSCAPE_SECONDARY = "landscape-secondary"
-} */
+declare export var WebOrientation: {|
+  +PORTRAIT_PRIMARY: 'portrait-primary',
+  +PORTRAIT_SECONDARY: 'portrait-secondary',
+  +LANDSCAPE_PRIMARY: 'landscape-primary',
+  +LANDSCAPE_SECONDARY: 'landscape-secondary',
+|};
+export type WebOrientationT = $Values<typeof WebOrientation>;
 
 export type PlatformOrientationInfo = {
   screenOrientationConstantAndroid?: number,
-  screenOrientationArrayIOS?: Orientation[],
-  screenOrientationLockWeb?: WebOrientationLock,
+  screenOrientationArrayIOS?: OrientationT[],
+  screenOrientationLockWeb?: WebOrientationLockT,
   ...
 };
 
 export type ScreenOrientationInfo = {
-  orientation: Orientation,
-  verticalSizeClass?: SizeClassIOS,
-  horizontalSizeClass?: SizeClassIOS,
+  orientation: OrientationT,
+  verticalSizeClass?: SizeClassIOST,
+  horizontalSizeClass?: SizeClassIOST,
   ...
 };
 
 export type OrientationChangeListener = (event: OrientationChangeEvent) => void;
 
 export type OrientationChangeEvent = {
-  orientationLock: OrientationLock,
+  orientationLock: OrientationLockT,
   orientationInfo: ScreenOrientationInfo,
   ...
 };
-- 
2.32.0

