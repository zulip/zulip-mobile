/* @flow
 * @generated by TsFlower
 */
import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  JSX$Element as $tsflower_subst$React$JSX$Element,
} from 'tsflower/subst/react';

import type {
  StyleProp as $tsflower_subst$RN$StyleProp,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
  TextStyle as $tsflower_subst$RN$TextStyle,
} from 'tsflower/subst/react-native';

import * as React from 'react';
// import { type PressableAndroidRippleConfig } from 'react-native'; // TODO(tsflower)
import { type Props as IndicatorProps } from './TabBarIndicator';
import { type Props as TabBarItemProps } from './TabBarItem';

import {
  type Event,
  type NavigationState,
  type Route,
  type Scene,
  type SceneRendererProps,
} from './types';

export type Props<T: Route> = SceneRendererProps & {
  navigationState: NavigationState<T>,
  scrollEnabled?: boolean,
  bounces?: boolean,
  activeColor?: string,
  inactiveColor?: string,
  pressColor?: string,
  pressOpacity?: number,
  getLabelText?: (scene: Scene<T>) => string | void,
  getAccessible?: (scene: Scene<T>) => boolean | void,
  getAccessibilityLabel?: (scene: Scene<T>) => string | void,
  getTestID?: (scene: Scene<T>) => string | void,
  renderLabel?: (
    scene: Scene<T> & {
      focused: boolean,
      color: string,
      ...
    },
  ) => $tsflower_subst$React$ReactNode,
  renderIcon?: (
    scene: Scene<T> & {
      focused: boolean,
      color: string,
      ...
    },
  ) => $tsflower_subst$React$ReactNode,
  renderBadge?: (scene: Scene<T>) => $tsflower_subst$React$ReactNode,
  renderIndicator?: (props: IndicatorProps<T>) => $tsflower_subst$React$ReactNode,
  renderTabBarItem?: (
    props: TabBarItemProps<T> & { key: string, ... },
  ) => React$Element<React$ElementType>,
  onTabPress?: (scene: Scene<T> & Event) => void,
  onTabLongPress?: (scene: Scene<T>) => void,
  tabStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  indicatorStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  indicatorContainerStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  labelStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  contentContainerStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  style?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  gap?: number,
  testID?: string,
  // android_ripple?: PressableAndroidRippleConfig, // TODO(tsflower)
  ...
};

declare export function TabBar<T: Route>(Props<T>): $tsflower_subst$React$JSX$Element;
