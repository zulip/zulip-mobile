/* @flow
 * @generated by TsFlower
 */
import type { Readonly } from 'tsflower/subst/lib';
import type { ViewProps as $tsflower_subst$RN$ViewProps } from 'tsflower/subst/react-native';
import * as React from 'react';
import { type HostComponent } from 'react-native';
import {
  type DirectEventHandler,
  type Double,
  type Int32,
  type WithDefault,
} from 'react-native/Libraries/Types/CodegenTypes';

export type OnPageScrollEventData = Readonly<{
  position: Double,
  offset: Double,
  ...
}>;

export type OnPageSelectedEventData = Readonly<{ position: Double, ... }>;
export type OnPageScrollStateChangedEventData = Readonly<{
  pageScrollState: 'idle' | 'dragging' | 'settling',
  ...
}>;

export type NativeProps = {
  ...$tsflower_subst$RN$ViewProps,
  scrollEnabled?: WithDefault<boolean, true>,
  layoutDirection?: WithDefault<'ltr' | 'rtl', 'ltr'>,
  initialPage?: Int32,
  orientation?: WithDefault<'horizontal' | 'vertical', 'horizontal'>,
  offscreenPageLimit?: Int32,
  pageMargin?: Int32,
  overScrollMode?: WithDefault<'auto' | 'always' | 'never', 'auto'>,
  overdrag?: WithDefault<boolean, false>,
  keyboardDismissMode?: WithDefault<'none' | 'on-drag', 'none'>,
  onPageScroll?: DirectEventHandler<OnPageScrollEventData>,
  onPageSelected?: DirectEventHandler<OnPageSelectedEventData>,
  onPageScrollStateChanged?: DirectEventHandler<OnPageScrollStateChangedEventData>,
  ...
};

type PagerViewViewType = HostComponent<NativeProps>;

export interface NativeCommands {
  setPage: (viewRef: React.ElementRef<PagerViewViewType>, selectedPage: Int32) => void;
  setPageWithoutAnimation: (
    viewRef: React.ElementRef<PagerViewViewType>,
    selectedPage: Int32,
  ) => void;
  setScrollEnabledImperatively: (
    viewRef: React.ElementRef<PagerViewViewType>,
    scrollEnabled: boolean,
  ) => void;
}

declare export var Commands: NativeCommands;
declare var _default: HostComponent<NativeProps>;
export default _default;
