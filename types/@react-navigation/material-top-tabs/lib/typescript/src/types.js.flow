/* @flow
 * @generated by TsFlower
 */
import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  ComponentProps as $tsflower_subst$React$ComponentProps,
} from 'tsflower/subst/react';

import type {
  StyleProp as $tsflower_subst$RN$StyleProp,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
  TextStyle as $tsflower_subst$RN$TextStyle,
} from 'tsflower/subst/react-native';

import {
  type Descriptor,
  type NavigationHelpers,
  type NavigationProp,
  type ParamListBase,
  type Route,
  type RouteProp,
  type TabActionHelpers,
  type TabNavigationState,
} from '@react-navigation/native';

import type React from 'react';
// import { type PressableAndroidRippleConfig } from 'react-native'; // TODO(tsflower)
import {
  type SceneRendererProps,
  typeof TabBar,
  type TabBarIndicatorProps,
  type TabViewProps,
} from 'react-native-tab-view';

export type MaterialTopTabNavigationEventMap = {|
  tabPress: {|
    data: void,
    canPreventDefault: true,
  |},
  tabLongPress: {| data: void |},
  swipeStart: {| data: void |},
  swipeEnd: {| data: void |},
|};

export type MaterialTopTabNavigationHelpers = NavigationHelpers<
  ParamListBase,
  MaterialTopTabNavigationEventMap,
> &
  TabActionHelpers<ParamListBase>;
export type MaterialTopTabNavigationProp<
  ParamList: ParamListBase,
  +RouteName: $Keys<ParamList> = $Keys<ParamList>,
  NavigatorID: string | void = void,
> = NavigationProp<
  ParamList,
  RouteName,
  NavigatorID,
  TabNavigationState<ParamList>,
  MaterialTopTabNavigationOptions,
  MaterialTopTabNavigationEventMap,
> &
  TabActionHelpers<ParamList>;

export type MaterialTopTabScreenProps<
  ParamList: ParamListBase,
  RouteName: $Keys<ParamList> = $Keys<ParamList>,
  NavigatorID: string | void = void,
> = {
  navigation: MaterialTopTabNavigationProp<ParamList, RouteName, NavigatorID>,
  route: RouteProp<ParamList, RouteName>,
  ...
};

export type MaterialTopTabNavigationOptions = {|
  title?: string,
  tabBarLabel?:
    | string
    | ((props: {
        focused: boolean,
        color: string,
        children: string,
        ...
      }) => $tsflower_subst$React$ReactNode),
  tabBarAccessibilityLabel?: string,
  tabBarAllowFontScaling?: boolean,
  tabBarShowLabel?: boolean,
  tabBarIcon?: (props: {
    focused: boolean,
    color: string,
    ...
  }) => $tsflower_subst$React$ReactNode,
  tabBarShowIcon?: boolean,
  tabBarBadge?: () => $tsflower_subst$React$ReactNode,
  tabBarIndicator?: (
    props: $Diff<TabBarIndicatorProps<Route<string>>, {| navigationState: mixed |}> & {
      state: TabNavigationState<ParamListBase>,
      ...
    },
  ) => $tsflower_subst$React$ReactNode,
  tabBarIndicatorStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  tabBarIndicatorContainerStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  tabBarTestID?: string,
  tabBarActiveTintColor?: string,
  tabBarInactiveTintColor?: string,
  tabBarPressColor?: string,
  tabBarPressOpacity?: number,
  tabBarBounces?: boolean,
  tabBarScrollEnabled?: boolean,
  tabBarIconStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  tabBarLabelStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  tabBarItemStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  tabBarContentContainerStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  tabBarStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  tabBarGap?: number,
  // tabBarAndroidRipple?: PressableAndroidRippleConfig, // TODO(tsflower)
  swipeEnabled?: boolean,
  animationEnabled?: boolean,
  lazy?: boolean,
  lazyPreloadDistance?: number,
  lazyPlaceholder?: () => $tsflower_subst$React$ReactNode,
|};

export type MaterialTopTabDescriptor = Descriptor<
  MaterialTopTabNavigationOptions,
  MaterialTopTabNavigationProp<ParamListBase>,
  RouteProp<ParamListBase>,
>;
export type MaterialTopTabDescriptorMap = { [key: string]: MaterialTopTabDescriptor };

export type MaterialTopTabNavigationConfig = $Diff<
  TabViewProps<Route<string>>,
  {|
    navigationState: mixed,
    onIndexChange: mixed,
    onSwipeStart: mixed,
    onSwipeEnd: mixed,
    renderScene: mixed,
    renderTabBar: mixed,
    renderLazyPlaceholder: mixed,
    swipeEnabled: mixed,
    animationEnabled: mixed,
    lazy: mixed,
    lazyPreloadDistance: mixed,
    lazyPlaceholder: mixed,
  |},
> & { tabBar?: (props: MaterialTopTabBarProps) => $tsflower_subst$React$ReactNode, ... };

export type MaterialTopTabBarProps = SceneRendererProps & {
  state: TabNavigationState<ParamListBase>,
  navigation: NavigationHelpers<ParamListBase, MaterialTopTabNavigationEventMap>,
  descriptors: MaterialTopTabDescriptorMap,
  ...
};
