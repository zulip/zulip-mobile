/* @flow
 * @generated by TsFlower
 */
import type { Partial } from 'tsflower/subst/lib';

import type {
  TimingAnimationConfig as $tsflower_subst$RN$Animated$TimingAnimationConfig,
  SpringAnimationConfig as $tsflower_subst$RN$Animated$SpringAnimationConfig,
  StyleProp as $tsflower_subst$RN$StyleProp,
  TextStyle as $tsflower_subst$RN$TextStyle,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
  WithAnimatedValue as $tsflower_subst$RN$Animated$WithAnimatedValue,
  TouchableWithoutFeedbackProps as $tsflower_subst$RN$TouchableWithoutFeedbackProps,
  GestureResponderEvent as $tsflower_subst$RN$GestureResponderEvent,
} from 'tsflower/subst/react-native';

import type {
  ReactNode as $tsflower_subst$React$ReactNode,
  MouseEvent as $tsflower_subst$React$MouseEvent,
} from 'tsflower/subst/react';

import { type HeaderOptions } from '@react-navigation/elements';

import {
  type Descriptor,
  type NavigationHelpers,
  type NavigationProp,
  type ParamListBase,
  type RouteProp,
  type TabActionHelpers,
  type TabNavigationState,
} from '@react-navigation/native';

import * as React from 'react';
import { typeof Animated } from 'react-native';
import { type EdgeInsets } from 'react-native-safe-area-context';

export type Layout = {
  width: number,
  height: number,
  ...
};

export type BottomTabNavigationEventMap = {|
  tabPress: {|
    data: void,
    canPreventDefault: true,
  |},
  tabLongPress: {| data: void |},
|};

export type LabelPosition = 'beside-icon' | 'below-icon';
export type BottomTabNavigationHelpers = NavigationHelpers<
  ParamListBase,
  BottomTabNavigationEventMap,
> &
  TabActionHelpers<ParamListBase>;
export type BottomTabNavigationProp<
  ParamList: ParamListBase,
  +RouteName: $Keys<ParamList> = $Keys<ParamList>,
  NavigatorID: string | void = void,
> = NavigationProp<
  ParamList,
  RouteName,
  NavigatorID,
  TabNavigationState<ParamList>,
  BottomTabNavigationOptions,
  BottomTabNavigationEventMap,
> &
  TabActionHelpers<ParamList>;

export type BottomTabScreenProps<
  ParamList: ParamListBase,
  RouteName: $Keys<ParamList> = $Keys<ParamList>,
  NavigatorID: string | void = void,
> = {
  navigation: BottomTabNavigationProp<ParamList, RouteName, NavigatorID>,
  route: RouteProp<ParamList, RouteName>,
  ...
};

export type TimingKeyboardAnimationConfig = {
  animation: 'timing',
  config?: $Diff<
    Partial<$tsflower_subst$RN$Animated$TimingAnimationConfig>,
    {|
      toValue: mixed,
      useNativeDriver: mixed,
    |},
  >,
  ...
};

export type SpringKeyboardAnimationConfig = {
  animation: 'spring',
  config?: $Diff<
    Partial<$tsflower_subst$RN$Animated$SpringAnimationConfig>,
    {|
      toValue: mixed,
      useNativeDriver: mixed,
    |},
  >,
  ...
};

export type TabBarVisibilityAnimationConfig =
  | TimingKeyboardAnimationConfig
  | SpringKeyboardAnimationConfig;

export type BottomTabNavigationOptions = {|
  ...HeaderOptions,
  title?: string,
  tabBarLabel?:
    | string
    | ((props: {
        focused: boolean,
        color: string,
        position: LabelPosition,
        children: string,
        ...
      }) => $tsflower_subst$React$ReactNode),
  tabBarShowLabel?: boolean,
  tabBarLabelPosition?: LabelPosition,
  tabBarLabelStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  tabBarAllowFontScaling?: boolean,
  tabBarIcon?: (props: {
    focused: boolean,
    color: string,
    size: number,
    ...
  }) => $tsflower_subst$React$ReactNode,
  tabBarIconStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  tabBarBadge?: number | string,
  tabBarBadgeStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  tabBarAccessibilityLabel?: string,
  tabBarTestID?: string,
  tabBarButton?: (props: BottomTabBarButtonProps) => $tsflower_subst$React$ReactNode,
  tabBarActiveTintColor?: string,
  tabBarInactiveTintColor?: string,
  tabBarActiveBackgroundColor?: string,
  tabBarInactiveBackgroundColor?: string,
  tabBarItemStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  tabBarHideOnKeyboard?: boolean,
  tabBarVisibilityAnimationConfig?: {
    show?: TabBarVisibilityAnimationConfig,
    hide?: TabBarVisibilityAnimationConfig,
    ...
  },
  tabBarStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  tabBarBackground?: () => $tsflower_subst$React$ReactNode,
  lazy?: boolean,
  header?: (props: BottomTabHeaderProps) => $tsflower_subst$React$ReactNode,
  headerShown?: boolean,
  unmountOnBlur?: boolean,
  freezeOnBlur?: boolean,
|};

export type BottomTabDescriptor = Descriptor<
  BottomTabNavigationOptions,
  BottomTabNavigationProp<ParamListBase>,
  RouteProp<ParamListBase>,
>;
export type BottomTabDescriptorMap = { [key: string]: BottomTabDescriptor };

export type BottomTabNavigationConfig = {
  tabBar?: (props: BottomTabBarProps) => $tsflower_subst$React$ReactNode,
  safeAreaInsets?: {
    top?: number,
    right?: number,
    bottom?: number,
    left?: number,
    ...
  },
  detachInactiveScreens?: boolean,
  sceneContainerStyle?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  ...
};

export type BottomTabHeaderProps = {
  layout: Layout,
  options: BottomTabNavigationOptions,
  route: RouteProp<ParamListBase>,
  navigation: BottomTabNavigationProp<ParamListBase>,
  ...
};

export type BottomTabBarProps = {
  state: TabNavigationState<ParamListBase>,
  descriptors: BottomTabDescriptorMap,
  navigation: NavigationHelpers<ParamListBase, BottomTabNavigationEventMap>,
  insets: EdgeInsets,
  ...
};

export type BottomTabBarButtonProps = $Diff<
  $tsflower_subst$RN$TouchableWithoutFeedbackProps,
  {| onPress: mixed |},
> & {
  to?: string,
  children: $tsflower_subst$React$ReactNode,
  onPress?: (
    e:
      | $tsflower_subst$React$MouseEvent<HTMLAnchorElement, MouseEvent>
      | $tsflower_subst$RN$GestureResponderEvent,
  ) => void,
  ...
};
