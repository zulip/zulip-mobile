/* @flow
 * @generated by TsFlower
 */

import type { ReactNode as $tsflower_subst$React$ReactNode } from 'tsflower/subst/react';
import type {
  WithAnimatedValue as $tsflower_subst$RN$Animated$WithAnimatedValue,
  StyleProp as $tsflower_subst$RN$StyleProp,
  TextStyle as $tsflower_subst$RN$TextStyle,
  ViewStyle as $tsflower_subst$RN$ViewStyle,
  LayoutChangeEvent as $tsflower_subst$RN$LayoutChangeEvent,
} from 'tsflower/subst/react-native';

import { typeof Animated } from 'react-native';

export type Layout = {
  width: number,
  height: number,
  ...
};

export type HeaderOptions = {|
  headerTitle?: string | ((props: HeaderTitleProps) => $tsflower_subst$React$ReactNode),
  headerTitleAlign?: 'left' | 'center',
  headerTitleStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  >,
  headerTitleContainerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerTitleAllowFontScaling?: boolean,
  headerLeft?: (props: {
    tintColor?: string,
    pressColor?: string,
    pressOpacity?: number,
    labelVisible?: boolean,
    ...
  }) => $tsflower_subst$React$ReactNode,
  headerLeftLabelVisible?: boolean,
  headerLeftContainerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerRight?: (props: {
    tintColor?: string,
    pressColor?: string,
    pressOpacity?: number,
    ...
  }) => $tsflower_subst$React$ReactNode,
  headerRightContainerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerPressColor?: string,
  headerPressOpacity?: number,
  headerTintColor?: string,
  headerBackground?: (props: {
    style: $tsflower_subst$RN$Animated$WithAnimatedValue<
      $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
    >,
    ...
  }) => $tsflower_subst$React$ReactNode,
  headerBackgroundContainerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerTransparent?: boolean,
  headerStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  >,
  headerShadowVisible?: boolean,
  headerStatusBarHeight?: number,
|};

export type HeaderTitleProps = {
  children: string,
  allowFontScaling?: boolean,
  tintColor?: string,
  onLayout?: (e: $tsflower_subst$RN$LayoutChangeEvent) => void,
  style?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  >,
  ...
};

export type HeaderButtonProps = {
  tintColor?: string,
  pressColor?: string,
  pressOpacity?: number,
  canGoBack?: boolean,
  ...
};

export type HeaderBackButtonProps = HeaderButtonProps & {
  disabled?: boolean,
  onPress?: () => void,
  backImage?: (props: { tintColor: string, ... }) => $tsflower_subst$React$ReactNode,
  label?: string,
  truncatedLabel?: string,
  labelVisible?: boolean,
  labelStyle?: $tsflower_subst$RN$Animated$WithAnimatedValue<
    $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$TextStyle>,
  >,
  allowFontScaling?: boolean,
  onLabelLayout?: (e: $tsflower_subst$RN$LayoutChangeEvent) => void,
  screenLayout?: Layout,
  titleLayout?: Layout,
  accessibilityLabel?: string,
  testID?: string,
  style?: $tsflower_subst$RN$StyleProp<$tsflower_subst$RN$ViewStyle>,
  ...
};
